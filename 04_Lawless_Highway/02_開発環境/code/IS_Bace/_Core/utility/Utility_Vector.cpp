//======================================================
//
//便利なベクトル[Utility_Vector.cpp]
//Author:石原颯馬
//
//======================================================
#include "Utility_Vector.h"

namespace IS_Utility
{
	//便利ベクトル
	//=============================================================
	// コンストラクタ（デフォルト）
	//=============================================================
	Utility_Vector3::Utility_Vector3()
	{
		x = 0.0f;
		y = 0.0f;
		z = 0.0f;
	}

	//=============================================================
	// コンストラクタ（3軸）
	//=============================================================
	Utility_Vector3::Utility_Vector3(float fx, float fy, float fz)
	{
		x = fx;
		y = fy;
		z = fz;
	}

	//=============================================================
	// 正規化
	//=============================================================
	Utility_Vector3 Utility_Vector3::Normalize(void)
	{
		float length = sqrtf(x * x + y * y + z * z);
		return Utility_Vector3(x / length, y / length, z / length);
	}


	//便利向き
	//=============================================================
	// コンストラクタ（デフォルト）
	//=============================================================
	Utility_Rotate3::Utility_Rotate3()
	{
		x = 0.0f;
		y = 0.0f;
		z = 0.0f;
	}

	//=============================================================
	// コンストラクタ（3軸）
	//=============================================================
	Utility_Rotate3::Utility_Rotate3(float fx, float fy, float fz)
	{
		x = fx;
		y = fy;
		z = fz;
	}

	//=============================================================
	// 正規化
	//=============================================================
	void Utility_Rotate3::FixRot(void)
	{
		x = fmodf(x + (D3DX_PI * 3), D3DX_PI * 2) - D3DX_PI;
		y = fmodf(y + (D3DX_PI * 3), D3DX_PI * 2) - D3DX_PI;
		z = fmodf(z + (D3DX_PI * 3), D3DX_PI * 2) - D3DX_PI;
	}
}